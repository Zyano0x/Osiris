name: Linux

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        compiler: [g++-11, g++-12, g++-13, g++-14, g++-15, clang++-17, clang++-18, clang++-19, clang++-20, clang++-21]
        configuration: [Debug, Release]
        exclude:
          - os: ubuntu-22.04
            compiler: g++-13
          - os: ubuntu-22.04
            compiler: g++-14
          - os: ubuntu-22.04
            compiler: g++-15
          - os: ubuntu-22.04
            compiler: clang++-17
          - os: ubuntu-22.04
            compiler: clang++-18
          - os: ubuntu-22.04
            compiler: clang++-19
          - os: ubuntu-22.04
            compiler: clang++-20
          - os: ubuntu-22.04
            compiler: clang++-21
          - os: ubuntu-24.04
            compiler: g++-11
          - os: ubuntu-24.04
            compiler: g++-12
        include:
          - os: ubuntu-24.04
            compiler: g++-15
            container: ubuntu:25.04

    container: ${{ matrix.container }}

    steps:
    - uses: actions/checkout@v4
    - name: prepare clang++-19
      if: matrix.compiler == 'clang++-19'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19
    - name: prepare clang++-20
      if: matrix.compiler == 'clang++-20'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 20
    - name: prepare clang++-21
      if: matrix.compiler == 'clang++-21'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 21
    - name: prepare in docker
      if: matrix.container
      run: |
        apt update
        apt install -y cmake git g++-15
    - name: configure
      run: CXX=${{ matrix.compiler }} cmake -Werror=dev -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DENABLE_TESTS="unit;functional" -DCMAKE_COMPILE_WARNING_AS_ERROR=1 -DCMAKE_UNITY_BUILD=ON -DCMAKE_UNITY_BUILD_BATCH_SIZE=4 -B build
    - name: build source
      run: cmake --build build --target Osiris -j $(nproc --all)
    - name: build unit tests
      run: cmake --build build --target UnitTests -j $(nproc --all)
    - name: build functional tests
      run: cmake --build build --target FunctionalTests -j $(nproc --all)
    - name: run unit tests
      run: ctest -R ^Unit --test-dir build --output-on-failure --no-tests=error --schedule-random -j $(nproc --all)
    - name: run functional tests
      run: ctest -R ^Functional --test-dir build --output-on-failure --no-tests=error --schedule-random -j $(nproc --all)
